/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mainForm;
/**
 *
 * @author anon
 */
public class mainForm extends javax.swing.JFrame {
    
    boolean new_exp = true;
    boolean err = false;
    String expression;

    /**
     * Creates new form mainForm
     */
    public mainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        box = new javax.swing.JTextField();
        plus = new javax.swing.JButton();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        label = new javax.swing.JLabel();
        equals = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        multiply = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        three = new javax.swing.JButton();
        four = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        point = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        sqrt = new javax.swing.JButton();
        e = new javax.swing.JButton();
        fact = new javax.swing.JButton();
        openP = new javax.swing.JButton();
        abs = new javax.swing.JButton();
        pow = new javax.swing.JButton();
        pi = new javax.swing.JButton();
        ln = new javax.swing.JButton();
        closeP = new javax.swing.JButton();
        sin = new javax.swing.JButton();
        cos = new javax.swing.JButton();
        tan = new javax.swing.JButton();
        x = new javax.swing.JButton();
        y = new javax.swing.JButton();
        z = new javax.swing.JButton();
        inX = new javax.swing.JButton();
        inY = new javax.swing.JButton();
        inZ = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Java Calculator");
        setResizable(false);

        box.setBackground(new java.awt.Color(255, 255, 255));
        box.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        box.setToolTipText("");
        box.setCaretColor(new java.awt.Color(254, 254, 254));
        box.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                boxKeyPressed(evt);
            }
        });

        plus.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        plus.setText("+");
        plus.setFocusable(false);
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        one.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        one.setText("1");
        one.setFocusable(false);
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        two.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        two.setText("2");
        two.setFocusable(false);
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        equals.setBackground(java.awt.Color.lightGray);
        equals.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mainForm/button.png"))); // NOI18N
        equals.setFocusable(false);
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });

        minus.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        minus.setText("-");
        minus.setFocusable(false);
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });

        multiply.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        multiply.setText("×");
        multiply.setFocusable(false);
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyActionPerformed(evt);
            }
        });

        divide.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        divide.setText("÷");
        divide.setFocusable(false);
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        three.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        three.setText("3");
        three.setFocusable(false);
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        four.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        four.setText("4");
        four.setFocusable(false);
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        five.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        five.setText("5");
        five.setFocusable(false);
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        six.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        six.setText("6");
        six.setFocusable(false);
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        seven.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        seven.setText("7");
        seven.setFocusable(false);
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        nine.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        nine.setText("9");
        nine.setFocusable(false);
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        eight.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        eight.setText("8");
        eight.setFocusable(false);
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        zero.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        zero.setText("0");
        zero.setFocusable(false);
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        point.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        point.setText(".");
        point.setFocusable(false);
        point.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointActionPerformed(evt);
            }
        });

        clear.setFont(new java.awt.Font("Noto Sans", 0, 15)); // NOI18N
        clear.setText("C");
        clear.setFocusable(false);
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        sqrt.setText("√");
        sqrt.setFocusable(false);
        sqrt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrtActionPerformed(evt);
            }
        });

        e.setText("e");
        e.setFocusable(false);
        e.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eActionPerformed(evt);
            }
        });
        
        fact.setText("!");
        fact.setFocusable(false);
        fact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                factActionPerformed(evt);
            }
        });

        openP.setText("(");
        openP.setFocusable(false);
        openP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPActionPerformed(evt);
            }
        });

        abs.setText("abs");
        abs.setFocusable(false);
        abs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absActionPerformed(evt);
            }
        });

        pow.setText("^");
        pow.setFocusable(false);
        pow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powActionPerformed(evt);
            }
        });

        pi.setText("π");
        pi.setFocusable(false);
        pi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piActionPerformed(evt);
            }
        });

        ln.setText("ln");
        ln.setFocusable(false);
        ln.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lnActionPerformed(evt);
            }
        });

        closeP.setText(")");
        closeP.setFocusable(false);
        closeP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closePActionPerformed(evt);
            }
        });

        sin.setText("sin");
        sin.setFocusable(false);
        sin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinActionPerformed(evt);
            }
        });

        cos.setText("cos");
        cos.setFocusable(false);
        cos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosActionPerformed(evt);
            }
        });

        tan.setText("tan");
        tan.setFocusable(false);
        tan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanActionPerformed(evt);
            }
        });

        x.setText("x");
        x.setFocusable(false);
        x.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xActionPerformed(evt);
            }
        });

        y.setText("y");
        y.setFocusable(false);
        y.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yActionPerformed(evt);
            }
        });

        z.setText("z");
        z.setFocusable(false);
        z.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zActionPerformed(evt);
            }
        });

        inX.setText("x =");
        inX.setFocusable(false);
        inX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inXActionPerformed(evt);
            }
        });

        inY.setText("y =");
        inY.setFocusable(false);
        inY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inYActionPerformed(evt);
            }
        });

        inZ.setText("z =");
        inZ.setFocusable(false);
        inZ.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inZActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(minus, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(point, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(e, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pi, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(fact, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ln, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pow, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(openP, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(closeP, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(abs, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(z, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inZ, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(inX, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(equals, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(box, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(label, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(box, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(plus, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(minus, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(sqrt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pow, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sin, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(e, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pi, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cos, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(74, 74, 74)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fact, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ln, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tan, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(openP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(abs, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(closeP, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(x, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inX, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(y, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inY, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(74, 74, 74)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(z, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(inZ, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(equals, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(one, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(two, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(three, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(five, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(six, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(four, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(nine, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(eight, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(seven, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(point, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(zero, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(clear, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(0, 21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents                                   

    private double[] vars = new double[3];;

    private boolean isSane(String exp) {
        int i = 0;
        for (char ch: exp.toCharArray()) {
            if (ch == '(') i++;
            if (ch == ')') i--;
            if (i<0) return false;
        }

        return (i==0);
    }
    
    private void insertInCursor(char ch) {
        int loc = box.getCaretPosition();
        String text = box.getText();
        
        box.setText(text.substring(0, loc) + ch + text.substring(loc));
        box.setCaretPosition(loc+1);
    }
    
    private void insertInCursor(String str) {
        int loc = box.getCaretPosition();
        String text = box.getText();
        
        box.setText(text.substring(0, loc) + str + text.substring(loc));
        box.setCaretPosition(loc+str.length());
    }
    
    private boolean isLegal(char key) {
        char[] illegal = " ./*-+^!@#$&_=[]{}:;\"\',/\\?<>|".toCharArray();
        return (evaluate.search(illegal, key) == -1 && !Character.isAlphabetic(key));
    }
    
    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        if (err) box.setText("");
        err = false;
        label.setText(box.getText() + " =");
        try {
            if (!isSane(box.getText())) throw new Exception("Paranthesis aren't matching!");
            box.setText(evaluate.eval(evaluate.proccess(box.getText())));
        } catch (Exception e) {
            if (e.getMessage().equals("empty String")) box.setText("Malformed Expression");
            else box.setText(e.getMessage());
            err = true;
        }
                
        new_exp = true;
        
    }//GEN-LAST:event_equalsActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed

        if (err) box.setText("");
        err = false;

        new_exp = false;
        int pos = box.getCaretPosition()-1;
        if (pos>=1) {
            String text = box.getText();
            char prev = text.charAt(pos);
            if (prev == '+' || prev == '-' || prev == '×' || prev == '÷' || prev == '^') {
                box.setText(text.substring(0, pos) + text.substring(pos+1));
                box.setCaretPosition(pos);
            }
        }
        insertInCursor('+');
    }//GEN-LAST:event_plusActionPerformed

    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed

        if (err) box.setText("");
        err = false;

        
        new_exp = false;
        String text = box.getText();
        int pos = box.getCaretPosition()-1;
        if (pos>1) {
            String prev = text.substring(pos-1, pos+1);
            if (prev.equals("+-") || prev.equals("--") || prev.equals("×-") || prev.equals("÷-") || prev.equals("^-")) {
                box.setText(text.substring(0, pos) + text.substring(pos+1));
                box.setCaretPosition(pos);
            }
        }
        insertInCursor('-');
    }//GEN-LAST:event_minusActionPerformed

    private void multiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplyActionPerformed

        if (err) box.setText("");
        err = false;

        
        new_exp = false;
        int pos = box.getCaretPosition()-1;
        if (pos>=1) {
            String text = box.getText();
            char prev = text.charAt(pos);
            if (prev == '+' || prev == '-' || prev == '×' || prev == '÷' || prev == '^') {
                box.setText(text.substring(0, pos) + text.substring(pos+1));
                box.setCaretPosition(pos);
            }
        }
        insertInCursor('×');
    }//GEN-LAST:event_multiplyActionPerformed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed

        if (err) box.setText("");
        err = false;

        new_exp = false;
        int pos = box.getCaretPosition()-1;
        if (pos>=1) {
            String text = box.getText();
            char prev = text.charAt(pos);
            if (prev == '+' || prev == '-' || prev == '×' || prev == '÷' || prev == '^') {
                box.setText(text.substring(0, pos) + text.substring(pos+1));
                box.setCaretPosition(pos);
            }
        }
        insertInCursor('÷');
    }//GEN-LAST:event_divideActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('1');
    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('2');
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('3');
    }//GEN-LAST:event_threeActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('4');
    }//GEN-LAST:event_fourActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('5');
    }//GEN-LAST:event_fiveActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('6');
    }//GEN-LAST:event_sixActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('7');
    }//GEN-LAST:event_sevenActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('8');
    }//GEN-LAST:event_eightActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('9');
    }//GEN-LAST:event_nineActionPerformed

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('0');
    }//GEN-LAST:event_zeroActionPerformed

    private void boxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_boxKeyPressed
        
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_LEFT) {
            if (err) box.setText("");
            err = false;
            new_exp=false;
            String text = box.getText();
            int pos = box.getCaretPosition();
            if (pos>2) {
                if (text.substring(pos-3, pos-1).equals("ln")) box.setCaretPosition(pos-3);
            }
            if (pos>3) {
                if (text.substring(pos-4, pos-1).equals("sin")) box.setCaretPosition(pos-4);
                if (text.substring(pos-4, pos-1).equals("cos")) box.setCaretPosition(pos-4);
                if (text.substring(pos-4, pos-1).equals("tan")) box.setCaretPosition(pos-4);
                if (text.substring(pos-4, pos-1).equals("abs")) box.setCaretPosition(pos-4);
            }
        }
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_RIGHT) {
            if (err) box.setText("");
            err = false;
            new_exp=false;
            String text = box.getText();
            int pos = box.getCaretPosition();
            if (pos<text.length()-3) {
                if (text.substring(pos, pos+2).equals("ln")) box.setCaretPosition(pos+2);
            }
            if (pos<text.length()-4) {
                if (text.substring(pos, pos+3).equals("sin")) box.setCaretPosition(pos+3);
                if (text.substring(pos, pos+3).equals("cos")) box.setCaretPosition(pos+3);
                if (text.substring(pos, pos+3).equals("tan")) box.setCaretPosition(pos+3);
                if (text.substring(pos, pos+3).equals("abs")) box.setCaretPosition(pos+3);
            }
        }
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            if (err) box.setText("");
            err = false;
            equals.doClick();
        }
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_ESCAPE) {
            clear.doClick();
        }
        if (evt.getKeyCode() == java.awt.event.KeyEvent.VK_BACK_SPACE) {
            if (err) box.setText("");
            err = false;
            new_exp=false;
            String text = box.getText();
            int pos = box.getCaretPosition();
            if (pos>2) {
                if (text.substring(pos-3, pos-1).equals("ln")) {
                    if (pos != text.length() && text.charAt(pos) == ')') {
                       box.setText(text.substring(0, pos-2) + text.substring(pos+1));
                       box.setCaretPosition(pos-2); 
                    } else {
                        box.setText(text.substring(0, pos-2) + text.substring(pos));
                        box.setCaretPosition(pos-2);
                    }
                }
            }
            if (pos>3) {
                if (text.substring(pos-4, pos-1).equals("sin") || text.substring(pos-4, pos-1).equals("cos") || text.substring(pos-4, pos-1).equals("tan") || text.substring(pos-4, pos-1).equals("abs")) {
                    if (pos != text.length() && text.charAt(pos) == ')') {
                       box.setText(text.substring(0, pos-4) + text.substring(pos));
                       box.setCaretPosition(pos-3); 
                    } else {
                        box.setText(text.substring(0, pos-4) + text.substring(pos-1));
                        box.setCaretPosition(pos-3);
                    }
                }
            }
        }
        if (evt.getKeyChar() == '+') {
           plus.doClick();
        }
        if (evt.getKeyChar() == '-') {
            minus.doClick();
        }
        if (evt.getKeyChar() == '*') {
            multiply.doClick();
        }
        if (evt.getKeyChar() == '/') {
            divide.doClick();
        }
        if (evt.getKeyChar() == '^') {
            pow.doClick();
        }
        if (evt.getKeyChar() == '.') {
            point.doClick();
        }
        if (evt.getKeyChar() == 'e') {
            e.doClick();
        }
        if (evt.getKeyChar() == 'x') {
            x.doClick();
        }
        if (evt.getKeyChar() == 'y') {
            y.doClick();
        }
        if (evt.getKeyChar() == 'z') {
            z.doClick();
        }
        if (evt.getKeyChar() == 'a') {
            abs.doClick();
        }
        if (evt.getKeyChar() == 'l') {
            ln.doClick();
        }
        if (evt.getKeyChar() == 's') {
            sin.doClick();
        }
        if (evt.getKeyChar() == 'c') {
            cos.doClick();
        }
        if (evt.getKeyChar() == 't') {
            tan.doClick();
        }
        if (evt.getKeyChar() == '!') {
            fact.doClick();
        }
        if (Character.isDigit(evt.getKeyChar())) {
            if (err) box.setText("");
            else if (new_exp) box.setText("");
            err = false;
            new_exp = false;
        }
        if (isLegal(evt.getKeyChar())) {
            box.setEditable(true);
        } else {
            box.setEditable(false);
        }
    }//GEN-LAST:event_boxKeyPressed

    private void pointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointActionPerformed

        if (err) box.setText("");
        err = false;

        String text = box.getText();
        if (text.endsWith(".")) {
            box.setText(text.substring(0, text.length() - 1) + ".");
        } else {
            box.setText(box.getText() + ".");
        }
    }//GEN-LAST:event_pointActionPerformed

    private void openPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('(');
    }//GEN-LAST:event_openPActionPerformed

    private void closePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closePActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor(')');
    }//GEN-LAST:event_closePActionPerformed

    private void powActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor("^");
    }//GEN-LAST:event_powActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        box.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private void sqrtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqrtActionPerformed
        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor("√()");
        box.setCaretPosition(box.getCaretPosition()-1);
        
    }//GEN-LAST:event_sqrtActionPerformed
    
    private void factActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_factActionPerformed
        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor("!");
    }//GEN-LAST:event_factActionPerformed
    
    private void eActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eActionPerformed
        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('e');
    }//GEN-LAST:event_eActionPerformed


    private void sinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor("sin()");
        box.setCaretPosition(box.getCaretPosition()-1);
    }//GEN-LAST:event_sinActionPerformed

    private void cosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor("cos()");
        box.setCaretPosition(box.getCaretPosition()-1);
    }//GEN-LAST:event_cosActionPerformed

    private void tanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor("tan()");
        box.setCaretPosition(box.getCaretPosition()-1);
    }//GEN-LAST:event_tanActionPerformed

    private void absActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor("abs()");
        box.setCaretPosition(box.getCaretPosition()-1);
    }//GEN-LAST:event_absActionPerformed

    private void lnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lnActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor("ln()");
        box.setCaretPosition(box.getCaretPosition()-1);
    }//GEN-LAST:event_lnActionPerformed

    private void piActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('π');
    }//GEN-LAST:event_piActionPerformed

    private void xActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('x');
    }//GEN-LAST:event_xActionPerformed

    private void inXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inXActionPerformed

        if (err) box.setText("");
        err = false;

        try {
            String result = evaluate.eval(evaluate.proccess(box.getText()));
            label.setText("x = ");
            box.setText(result);
            vars[0] = Double.parseDouble(result);
            evaluate.setVars(vars);
        } catch (Exception e) {
            box.setText(e.getMessage());
        }

        new_exp = true;
    }//GEN-LAST:event_inXActionPerformed

    private void yActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('y');
    }//GEN-LAST:event_yActionPerformed

    private void inYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inYActionPerformed

        if (err) box.setText("");
        err = false;

        try {
            String result = evaluate.eval(evaluate.proccess(box.getText()));
            label.setText("y = ");
            box.setText(result);
            vars[1] = Double.parseDouble(result);
            evaluate.setVars(vars);
        } catch (Exception e) {
            box.setText(e.getMessage());
        }

        new_exp = true;
    }//GEN-LAST:event_inYActionPerformed

    private void zActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zActionPerformed

        if (err) box.setText("");
        else if (new_exp) box.setText("");
        err = false;
        new_exp = false;
        insertInCursor('z');
    }//GEN-LAST:event_zActionPerformed

    private void inZActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inZActionPerformed

        if (err) box.setText("");
        err = false;
        try {
            String result = evaluate.eval(evaluate.proccess(box.getText()));
            label.setText("z = ");
            box.setText(result);
            vars[2] = Double.parseDouble(result);
            evaluate.setVars(vars);
        } catch (Exception e) {
            box.setText(e.getMessage());
        }

        new_exp = true;
    }//GEN-LAST:event_inZActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton abs;
    private javax.swing.JTextField box;
    private javax.swing.JButton clear;
    private javax.swing.JButton closeP;
    private javax.swing.JButton cos;
    private javax.swing.JButton divide;
    private javax.swing.JButton eight;
    private javax.swing.JButton equals;
    private javax.swing.JButton fact;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton inX;
    private javax.swing.JButton inY;
    private javax.swing.JButton inZ;
    private javax.swing.JLabel label;
    private javax.swing.JButton ln;
    private javax.swing.JButton minus;
    private javax.swing.JButton multiply;
    private javax.swing.JButton nine;
    private javax.swing.JButton one;
    private javax.swing.JButton openP;
    private javax.swing.JButton e;
    private javax.swing.JButton pi;
    private javax.swing.JButton plus;
    private javax.swing.JButton point;
    private javax.swing.JButton pow;
    private javax.swing.JButton seven;
    private javax.swing.JButton sin;
    private javax.swing.JButton six;
    private javax.swing.JButton sqrt;
    private javax.swing.JButton tan;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton x;
    private javax.swing.JButton y;
    private javax.swing.JButton z;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables
}
